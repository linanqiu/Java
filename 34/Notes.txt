Supporting files are:
Project Explorer > ShopService


Why not to use SOAP, drawbacks of soap based:

1.Soap based worked according to soap protocol.
We will be generating xml type soap request. For that purpose we need these testers. 
Understanding soap response is not easy.

2. Soap was not plain http. It was based on a seperate protocol. So it can only be run on application server. WEbserver cannot run that. 
3. We run entire web on http protocol, but soap protocol worked over there. There was change in protocol


Restful:
Representational State Transfer. They are based on 3 aspects:
1. We will be working only with http. There is no seperate protocol involved. All request would be http request(get, put, post, delete).
Restful converts the 4 http request into the 4 crud operations.
a get request is similar to select query.
a delete request corresponds to delete query.
post request is same as insert.
put request is similar to update. Whatever data we want to send to server, we pack that into one request object. 
We categories all these request into 2 categories: Idempotent and non-idempotent. 
Idempotent request: a request which is by mistake called multiple times, and calling this multiple times does not have adverse effects is called idempotent.
Eg: Select * from products; do it 100 times. Database is unharmed. 
If we call delete operation like: delete product with id 10; say more than once. It is useless. 
Update request: change contact number to xyz, subsequent calls would not affect database.
But during insert, in hiberate we don't need to give id, it gets auto-generated. When we submit post request, request goes to server(insert), if we
refresh the same request, all details would be added with new id. So adding 100 times changes database. So this is non-idempotent. 


Restful services don't work with url's. They work with uri (uniform resources identifier). 
Difference: URL is exact locator. Eg: Mr. X is residing at some address and I send request to meet him, that's the proper address that I will give.
uri: Eg: city is this, person id is 1t6y452464. Who knows the id? no one :( Only finder knows the id about person. Converts id into address, goes to address and retrives info.
so in uri while requesting we don't send complete request. We only send identifier. 

so this uri 
htpp://localhost:8080/MyWebapp/jsps/getproducts.jsp   (normally name of jsp is verb-getproducts) (this url tells complete info: 
in my server I have application webapp, in that there is a folder jsp, in that we have file called getproducts.jsp)
will change to:
htpp://localhost:8080/MyWebapp/Products (normally name of resful is noun-Products) (we don't know that writing Products will take me to which jsp?)
normally name of jsp is with verb. But restful services we write nouns. 

Other example of soap url vs restful webservices uri
htpp://localhost:8080/MyWebapp/jsps/getproducts.jsp?pid=34232 
htpp://localhost:8080/MyWebapp/Products/634

Pros of using Rest:
By only changing request type, we can change the entire task to be done. This is Rest based. 
We can work with any simple servlet container like Tomcat. We don't need Glassfish. 
All our request will be in form of Restful uri. 
4 CRUD operation that correspond to http request. 


Download - restful jersey api. Download it on Maven, as a maven project. Google: download restful jersey maven.

There are many api for restful, we prefer jersey because jersey is parent company which defined restful services 
and are also creator of http protocol. So they understand protocol in best way. 

---------------
Me:

how to install jersey restful maven? First I will install maven and then jersey. This was a mistake. Maven is already installed in Eclipse.
Never do following steps, this led to embedding of maven with eclipse which I don't know how to undo :(
what is maven? dictionary meaning of maven is expert or connoisseur. 
How to install maven - followed half of steps given on: https://www.youtube.com/watch?v=Nn8cmBVdYDs

Go to https://maven.apache.org/download.cgi
download binary zip archieve - apache-maven-3.3.9-bin.zip
unzip and extract to downloads. Copy apache.maven-3.3.9
Instead of going to C drive and Creating folder ...
I installed it in C drive > Program Files (Now I can see there is folder named apache-maven-3.3.9 because I pasted it here)
Now set up environment variable: open control panel > System and security > System > Advanced System Settings > Environment variables
Now in System variables > Click on User variables for sanket > Click New > Name: JAVA_HOME, path/value=jdk path of java. > Ok.
Again in System variables > Click on User variables for sanket > Click New > Name: MAVEN_HOME, path is C:\Program Files/apache-maven-3.3.9\bin > Ok
Now in System variables > Click on Path variable > Click Edit > New > C:\Program Files/apache-maven-3.3.9\bin > Ok  > Ok > Ok > close all windows
Go to command line and type mvn --version. If it shows maven version sth sth, that means maven is installed successfully.

Install of jersey: watch this video at 3 mins:
https://www.youtube.com/watch?v=skltzZH7i4w&index=11&list=PLCCK2CzCX8EXTVHe12NLKMHq5GytRJSUj

Drag and dropped to eclipse from here:
https://marketplace.eclipse.org/content/restful-plugin-eclipse

On August 16 I installed eclipse Mars from https://eclipse.org/mars/ 
Working directory for eclipse Mars is C:\Users\sanket\workspace2mars
Why? Trying to run pom.xml. We(me and vishal) corrected the errors and then tried to run pom.xml in eclise neon.

Deleted apache-maven-3.3.9 from C:\Program Files
Deleted environment variable MAVEN_HOME in user. Also deleted from Path link to MAVEN_HOME :(
 
----------------

On Aug 16:
Moved all files of workspace to C:\Users\sanket\old eclipse neon till aug 16
So all old files are in that folder. 

Dowloaded Eclipse Mars and added workspace to C:\Users\sanket\workspace

Changed workspace of Eclipse Neon to C:\Users\sanket\workspaceNeon

From now onwards using Eclipse Mars in new user. 
Stopped working with this user. 
<html>Close</html>



