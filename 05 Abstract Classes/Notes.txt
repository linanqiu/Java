Abstract Class:
If you write a class as abstract, then it becomes abstract class. 
We can never create an object of that class. It is created just by writing class as abstract.
 
Abstract method/function:
A function which only has a name and no body. 
Are only possible in abstract classes. 

Linking/binding:
b1.show() function call got linked to function definition. 
Whenever call is linked to function definition, it is called linking or binding.


Interface: 
Interface looks like class but difference is that the interface only has abstract function.
You cannot have functions with body in an interface. In an abstract class you can have both but not interface. 
You can inherit only one class into your class. But while inheriting interfaces, you can inherit more than one interface in same class.
While inheriting class we say class A extends B. But while inheriting interface we say class A implements B, C. 

Use of having interfaces: Interface means the medium to use. Eg: ATM machine buttons and screen are interface. 
Interface exposes to outside world the functions that have to be kept public in a class. 
Interface exposes public component of a class.



Final keyword:
If a class is written as "final class" it cannot be inherited.
If you write a data member as "final datatype(eg: int) = 10" then its value cannot be modified.
If you write a function as final, it cannot be overridden. So your child classes cannot redefine a function with same name. 









