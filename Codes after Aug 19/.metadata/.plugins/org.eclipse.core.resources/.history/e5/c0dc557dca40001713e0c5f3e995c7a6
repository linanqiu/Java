package jpademo;

import java.util.List;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.NamedQuery;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Join;
import javax.persistence.criteria.Root;

import org.eclipse.persistence.config.PessimisticLock;
import org.eclipse.persistence.config.QueryHints;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.aitacs.jee.jpademo.entities.Car;
import com.aitacs.jee.jpademo.entities.User;

@NamedQuery(name="find_user_by_id", query="select u from User u where u.id=:ID")
public class JPARelationshipTest {

	EntityManagerFactory emFactory;
	EntityManager manager;
	EntityTransaction transaction;

	@Before
	public void setUp() throws Exception {
		emFactory = Persistence.createEntityManagerFactory("jpademo");
		manager = emFactory.createEntityManager();
		transaction = manager.getTransaction();
		transaction.begin();

	}

	@After
	public void tearDown() throws Exception {
		transaction.commit();
		manager.close();
	}

	/*
	@Test
	public void testOneToOneRelationUniDirectional() {

		User user = new User("Alex", "Mahome", "amahome", 35, "mahome@email.com", null);
		Car c = new Car("Chevy", "Conaro", "2014", "Red Metallic");

		user.setCar(c);

		manager.persist(user);

		User dbUserObj = manager.find(User.class, user.getId());

		assertNotNull(dbUserObj);
		assertNotNull(dbUserObj.getCar());
		assertEquals(dbUserObj.getFirstName(), user.getFirstName());
		assertEquals(dbUserObj.getCar().getMake(), user.getCar().getMake());
	}

	@Test
	public void testOneToOneRelationBiDirectional() {

		User user = new User("Alex", "Mahome", "amahome", 35, "mahome@email.com", null);
		Car c = new Car("Chevy", "Conaro", "2014", "Red Metallic");

		c.setUser(user);
		user.setCar(c);

		manager.persist(user);
		User dbUserObj = manager.find(User.class, user.getId());
		Car dbCarObj = manager.find(Car.class, c.getId());

		assertNotNull(dbUserObj);
		assertNotNull(dbUserObj.getCar());
		assertEquals(dbUserObj.getFirstName(), user.getFirstName());
		assertEquals(dbUserObj.getCar().getMake(), user.getCar().getMake());

		assertNotNull(dbCarObj);
		assertNotNull(dbCarObj.getUser());
		assertEquals(dbCarObj.getMake(), c.getMake());
		assertEquals(dbCarObj.getUser().getFirstName(), c.getUser().getFirstName());

	}

	@Test
	public void testOnetoManyRelationship() {
		User user = new User("Alex", "Mahome", "amahome", 35, "mahome@email.com", null);

		Book book = new Book();
		book.setName("Internet of Things");
		book.setAuthor("Manchurian Lal");

		user.getBooks().add(book);

		manager.persist(user);

		User dbUser = manager.find(User.class, user.getId());
		assertNotNull(dbUser);
		assertEquals(dbUser.getBooks().size(), 1);
		assertTrue(dbUser.getBooks().contains(book));

	}

	@Test
	public void testManyToOneRelationship() {
		User user = new User("Alex", "Mahome", "amahome", 35, "mahome@email.com", null);

		Book book = new Book();
		book.setName("Internet of Things");
		book.setAuthor("Manchurian Lal");

		user.getBooks().add(book);

		book.setUser(user);

		manager.persist(user);

		User dbUser = manager.find(User.class, user.getId());
		assertNotNull(dbUser);
		assertEquals(dbUser.getBooks().size(), 1);
		assertTrue(dbUser.getBooks().contains(book));

		Book dbBook = manager.find(Book.class, book.getBookId());
		assertNotNull(dbBook);
		assertNotNull(dbBook.getUser());
		assertTrue(dbBook.getUser().getId() == dbUser.getId());
	}
	
	@Test
	public void testManytoManyRelationship(){
		User user1 = new User("Alex", "Mahome", "amahome", 35, "mahome@email.com", null);
		User user2 = new User("Ted", "Jones", "tjones", 40, "tjones@email.com", null);

		Project project1 = new Project();
		project1.setProjectLead("Manchurian Lal");
		project1.setProjectName("Twitter App");
	
		Project project2 = new Project();
		project2.setProjectLead("Karthik K");
		project2.setProjectName("Time tracking app");

		user1.getProjects().add(project1);
		user1.getProjects().add(project2);
		
		user2.getProjects().add(project1);
		user2.getProjects().add(project2);
		
		manager.persist(user1);
		manager.persist(user2);
		
	}
	*/

	/**JPQL - Java Persistence Query Language **/
		
	@Test
	public void testJPQL(){
		User user1 = new User("Alex", "Mahome", "amahome", 35, "mahome@email.com", null);
		User user2 = new User("Michael", "Wagner", "mwagner", 38, "mwagner@email.com", null);

		manager.persist(user1);
		manager.persist(user2);
		
		transaction.commit();
		transaction.begin();
		
		//Query
		Query query = manager.createQuery("select u from User u"); //Regular JPQL
		
		List<User> userList = query.getResultList();
		System.out.println("**** Regular JPQL ************************");
		for(User u: userList){
			System.out.println(u.getFirstName() + " | " + u.getLastName());
		}
		
		//TypedQuery
		TypedQuery<User> typedQuery = manager.createQuery("select u from User u", User.class);
		List<User> users = typedQuery.getResultList(); //Execute the JPQL and returns the results as a List
		System.out.println("**** Typed JPQL ");
		for(User u: users){
			System.out.println(u.getFirstName() + " | " + u.getLastName());
		}
	}
	
	@Test
	public void testPessimisticLocking() throws Exception {
		User user1 = new User("Alex", "Mahome", "amahome", 35, "mahome@email.com", null);
		User user2 = new User("Michael", "Wagner", "mwagner", 38, "mwagner@email.com", null);

		manager.persist(user1);
		manager.persist(user2);
		
		transaction.commit();
		transaction.begin();
		
		Integer userId = (Integer)manager.createQuery("select u.id from User u").getResultList().get(0);
		
		Query query = manager.createQuery("select u from User u where u.id= :ID");
		query.setParameter("ID", userId);
		query.setHint(QueryHints.PESSIMISTIC_LOCK, PessimisticLock.Lock);
		User u = (User) query.getSingleResult();
		
		u.setAge(45);
		
		transaction.commit();
		transaction.begin();
		
		Query query1 = manager.createQuery("select u from User u");
		
		List<User> userList = query1.getResultList();
		System.out.println("**** Regular JPQL ************************");
		for(User user: userList){
			System.out.println(user.getFirstName() + " | " + user.getLastName() + " | " + user.getAge());
		}
		
	}
	
	@Test
	public void testReadUsers(){
		System.out.println("Reading all user : ");
		User user1 = new User("Alex", "Mahome", "amahome", 35, "mahome@email.com", null);
		
		Car car = new Car();
		car.setMake("Toyota");
		user1.setCar(car);
		
		manager.persist(user1);

		User user2 = new User("Michael", "Wagner", "mwagner", 38, "mwagner@email.com", null);
		manager.persist(user2);
	
		transaction.commit();
		
		transaction.begin();

		CriteriaBuilder builder = manager.getCriteriaBuilder();
		CriteriaQuery<Object[]> criteria = builder.createQuery(Object[].class);
				
		Root<User> entity = criteria.from(User.class);
		criteria.multiselect(entity.get("firstName"), entity.get("lastName"), entity.get("age"));
		
		criteria.orderBy(builder.desc(entity.get("lastName")), builder.desc(entity.get("firstName")));
		
		Query query = manager.createQuery(criteria);
		
		List<Object[]> userList = query.getResultList();
		System.out.println("**** CriteriaBuilder JPQL ************************");
		for(Object[] user: userList){
			System.out.println(user[0]+ " | " + user[1] + " | " + user[2]);
		}
	}
	
	@Test
	public void testJoinFetch() {
        System.out.println("Reading all users and their cars.");
        
        User user = new User();
		user.setFirstName("Alex");
		user.setLastName("Mahone");
		user.setUserName("amahone");
		user.setAge(40);
		user.setEmail("mahone@gmail.com");
		
		Car car = new Car();
		car.setMake("Toyota");
		user.setCar(car);
		
		manager.persist(user);
		
		User user1 = new User();
		user1.setFirstName("Tom");
		user1.setLastName("Reaves");
		user1.setUserName("treaves");
		user1.setAge(45);
		user1.setEmail("reaves@gmail.com");
		
		car = new Car();
		car.setMake("Chevrolet");
		user1.setCar(car);
		
		manager.persist(user1);
		
		
		transaction.commit();
		transaction.begin();
        
        CriteriaBuilder cb = manager.getCriteriaBuilder();
        CriteriaQuery<User> criteria = cb.createQuery(User.class);
        Root<User> entity = criteria.from(User.class);
        entity.join("car"); // To apply a join clause on a User select query with Car
        criteria.orderBy(cb.asc(entity.get("lastName")), cb.asc(entity.get("firstName")));
        TypedQuery<User> query = manager.createQuery(criteria);

        List<User> result = query.getResultList();
        for(User us: result){
			System.out.print(us.getUserName());
			System.out.println(" "+us.getLastName());
			System.out.println(us.getAge());
			System.out.println(us.getCar().getMake());
		}
    }
	
	@Test
	public void testJoinAPI() {
        System.out.println("Reading all users and their cars.");
        
        User user = new User();
		user.setFirstName("Alex");
		user.setLastName("Mahone");
		user.setUserName("amahone");
		user.setAge(40);
		user.setEmail("mahone@gmail.com");
		
		Car car = new Car();
		car.setMake("Toyota");
		car.setModel("Camry");
		user.setCar(car);
		
		manager.persist(user);
		
		User user1 = new User();
		user1.setFirstName("Tom");
		user1.setLastName("Reaves");
		user1.setUserName("treaves");
		user1.setAge(45);
		user1.setEmail("reaves@gmail.com");
		
		car = new Car();
		car.setMake("Chevrolet");
		car.setModel("Camaro");
		user1.setCar(car);
		
		manager.persist(user1);
		
		
		transaction.commit();
		transaction.begin();
        
        CriteriaBuilder cb = manager.getCriteriaBuilder();
        CriteriaQuery<Object[]> criteria = cb.createQuery(Object[].class);
        Root<User> userRoot = criteria.from(User.class);
        Join<User,Car> userCar = userRoot.join("car");
        
        criteria.multiselect(userRoot.get("firstName"),userCar.get("make"),userCar.get("model"));
        criteria.orderBy(cb.asc(userCar.get("make")), cb.asc(userRoot.get("lastName")), cb.asc(userRoot.get("firstName")));
        Query query = manager.createQuery(criteria);

        List<Object[]> result = query.getResultList();
        for(Object[] us: result){
			System.out.print("FirstName: "+us[0]);
			System.out.print(" Make: "+us[1]);
			System.out.println(" Model: "+us[2]);
		}
    }
	
	public void testNamedQuery(){
		TypedQuery<User> typedQuery = manager.createNamedQuery("find_user_by_id", User.class);
		
		typedQuery.setParameter("ID", 2);
		
		List<User> users = typedQuery.getResultList();
		
		System.out.println("List of users size: " + users);
	
	}
	
}
	






























