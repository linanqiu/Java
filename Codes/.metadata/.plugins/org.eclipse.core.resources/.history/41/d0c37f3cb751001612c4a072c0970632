//HW trial #1: This calculator I can press keys and print which key is clicked. It is little slow, takes time to respond
package org.java.GUI;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;

public class CalcFunctionHW extends Frame implements ActionListener, WindowListener { //added implements ActionListener to add functionality to buttons
	//also added override actionPerformed method
	//when we add WindowListener, seven methods would be overridden. 
	
	Button b[]; 
	TextField t1;
	Button bmain;
	
	public CalcFunctionHW(String title) throws HeadlessException {
		super(title);
		bmain = new Button("ON/OFF"); //to add on/off create a button named bmain
		add(bmain, BorderLayout.WEST); //put bmain on west side
		bmain.addActionListener(this); //keyword "this" means our button is registered to listener of this particular class. Go to actionPerformed
 		
		t1 = new TextField();
		t1.setEditable(false);
		this.addWindowListener(this); //frame itself is the source. So we add windowlistener. Now it will close calculator
		
		t1.setFont(new Font("Arial", Font.BOLD, 24));
		t1.setComponentOrientation(ComponentOrientation.RIGHT_TO_LEFT);

		b = new Button[20]; 
		int  i;
		for(i=0; i<10; i++){
			b[i] = new Button(""+i);  
		}
		
		b[10] = new Button("+");		b[11] = new Button("-");		b[12] = new Button("*");		b[13] = new Button("/");
		b[14] = new Button(".");		b[15] = new Button("=");		b[16] = new Button("M+");		b[17] = new Button("M-");
		b[18] = new Button("MC"); 
		b[19] = new Button("MR"); 
		
		b[0].addActionListener(this);	b[1].addActionListener(this);	b[2].addActionListener(this);	b[3].addActionListener(this);	
		b[4].addActionListener(this);	b[5].addActionListener(this);	b[6].addActionListener(this);	b[7].addActionListener(this);	
		b[8].addActionListener(this);	b[9].addActionListener(this);	b[10].addActionListener(this);	b[11].addActionListener(this);	
		b[12].addActionListener(this);	b[13].addActionListener(this);	b[14].addActionListener(this);	b[15].addActionListener(this);
		b[16].addActionListener(this);	b[17].addActionListener(this);	b[18].addActionListener(this);	b[19].addActionListener(this);
		
		
		Panel p1 = new Panel();
		p1.setLayout(new GridLayout(4, 5));
		p1.add(b[1]);	p1.add(b[2]);	p1.add(b[3]);	p1.add(b[10]);	p1.add(b[16]);
		p1.add(b[4]);	p1.add(b[5]);	p1.add(b[6]);	p1.add(b[11]);	p1.add(b[17]);
		p1.add(b[7]);	p1.add(b[8]);	p1.add(b[9]);	p1.add(b[12]);	p1.add(b[18]);
		p1.add(b[14]);	p1.add(b[0]);	p1.add(b[15]);	p1.add(b[13]);	p1.add(b[19]);
		
		t1.setBackground(Color.white);
		add(t1, BorderLayout.NORTH); 
		add(p1, BorderLayout.CENTER); 
	}

	public static void main(String[] args) {
		CalcFunctionHW calc = new CalcFunctionHW("CalcFunctionHWulator");
		calc.setBounds(450, 180, 450, 450);
		calc.setVisible(true);
	}

	@Override
	public void actionPerformed(ActionEvent e) { //This function is auto-generated by action event
		if(e.getSource() == bmain) { //check if button has been clicked
			if(t1.getBackground()==Color.white) { t1.setBackground(Color.black); //put black color into that
				t1.setText(" "); } 
			else { t1.setBackground(Color.white);	t1.setText(""); }	
		} else if (e.getSource()==b[0]) {int value = 0; System.out.println(0);
		} else if (e.getSource()==b[1]) {int value = 1; System.out.println(1);
		} else if (e.getSource()==b[2]) {int value = 2; System.out.println(2);
		} else if (e.getSource()==b[3]) {int value = 3; System.out.println(3);
		} else if (e.getSource()==b[4]) {int value = 4; System.out.println(4);
		} else if (e.getSource()==b[5]) {int value = 5; System.out.println(5);
		} else if (e.getSource()==b[6]) {int value = 6; System.out.println(6);
		} else if (e.getSource()==b[7]) {int value = 7; System.out.println(7);
		} else if (e.getSource()==b[8]) {int value = 8; System.out.println(8);
		} else if (e.getSource()==b[9]) {int value = 9; System.out.println(9); }
	}

	@Override
	public void windowActivated(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowClosed(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowClosing(WindowEvent e) {
		System.exit(0);
	}

	@Override
	public void windowDeactivated(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowDeiconified(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowIconified(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void windowOpened(WindowEvent e) {
		// TODO Auto-generated method stub
		
	}
}
